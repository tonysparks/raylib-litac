/*
    RayLib bindings for LitaC
    Generated via Leola tools and Tony Sparks for version: v2.5

    Credit to: www.raylib.com

    RayLib License:

    raylib is licensed under an unmodified zlib/libpng license, which is an OSI-certified, BSD-like license
    that allows static linking with closed source software:

    Copyright (c) 2013-2019 Ramon Santamaria (@raysan5)

    This software is provided "as-is", without any express or implied warranty. In no event will the authors
    be held liable for any damages arising from the use of this software.

    Permission is granted to anyone to use this software for any purpose, including commercial applications,
    and to alter it and redistribute it freely, subject to the following restrictions:

    The origin of this software must not be misrepresented; you must not claim that you wrote the original
    software. If you use this software in a product, an acknowledgment in the product documentation would be
    appreciated but is not required.

    Altered source versions must be plainly marked as such, and must not be misrepresented as being the original
    software.

    This notice may not be removed or altered from any source distribution.
*/
@include("<raylib.h>");
@include("<raymath.h>");

@compiler_option(
    .options = "-I{relativePath}/include"
);

@compiler_option(
    .options = " -L{relativePath}/lib -lraylib"
);


import "std/libc" as c;

@foreign public struct MusicData;
public typedef Texture2D as Texture;

// TextureCubemap type, actually, same as Texture2D
public typedef Texture2D as TextureCubemap;
public typedef Camera3D as Camera;    // Camera type fallback, defaults to Camera3D

// RenderTexture type, same as RenderTexture2D
public typedef RenderTexture2D as RenderTexture;
public typedef Font as SpriteFont     // SpriteFont type fallback, defaults to Font
// Music type (file streaming from memory)
// NOTE: Anything longer than ~10 seconds should be streamed
public typedef *MusicData as Music;

/*
#define LOC_MAP_DIFFUSE      LOC_MAP_ALBEDO
#define LOC_MAP_SPECULAR     LOC_MAP_METALNESS
#define MAP_DIFFUSE      MAP_ALBEDO
#define MAP_SPECULAR     MAP_METALNESS
*/

/*
==================================================================
RayLib Types
==================================================================
*/

@foreign public const MAX_SHADER_LOCATIONS: i32 = 1024;
@foreign public const MAX_MATERIAL_MAPS: i32 = 1024;

//@foreign struct va_list;
@foreign public typedef func(i32, *const char, c::va_list):void as TraceLogCallback;

@foreign public struct Vector2 {
    x:f32
    y:f32
}

@foreign public struct Vector3 {
    x:f32
    y:f32
    z:f32
}


@foreign public struct Vector4 {
    x:f32
    y:f32
    z:f32
    w:f32
}

// Quaternion type, same as Vector4
@foreign typedef Vector4 as Quaternion;

// Matrix type (OpenGL style 4x4 - right handed, column major)
@foreign public struct Matrix {
    m0:f32; m4:f32; m8:f32;  m12:f32;
    m1:f32; m5:f32; m9:f32;  m13:f32;
    m2:f32; m6:f32; m10:f32; m14:f32;
    m3:f32; m7:f32; m11:f32; m15:f32;

}

@foreign public struct Color {
    r: u8
    g: u8
    b: u8
    a: u8
}

@foreign public struct Rectangle {
    x: f32
    y: f32
    width: f32
    height: f32
}

@foreign public struct Image {
    data: *void
    width: i32
    height: i32
    mipmaps: i32
    format: i32
}

@foreign public struct Texture2D {
    id: u32
    width: i32
    height: i32
    mipmaps: i32
    format: i32
}

@foreign public struct RenderTexture2D {
    id: u32
    texture: Texture2D
    depth: Texture2D
    depthTexture: bool
}

@foreign public struct NPatchInfo {
    sourceRec: Rectangle
    left: i32
    top: i32
    right: i32
    bottom: i32
    type: i32
}

@foreign public struct CharInfo {
    value: i32
    rec: Rectangle
    offsetX: i32
    offsetY: i32
    advanceX: i32
    data: *u8
}

@foreign public struct Font {
    texture: Texture2D
    baseSize: i32
    charsCount: i32
    chars: *CharInfo
}

@foreign public struct Camera3D {
    position: Vector3
    target: Vector3
    up: Vector3
    fovy: f32
    type: i32
}

@foreign public struct Camera2D {
    offset: Vector2
    target: Vector2
    rotation: f32
    zoom: f32
}

@foreign public struct Mesh {
    vertexCount: i32
    triangleCount: i32
    vertices: *f32
    texcoords: *f32
    texcoords2: *f32
    normals: *f32
    tangents: *f32
    colors: *u8
    indices: *u16
    animVertices: *f32
    animNormals: *f32
    boneIds: *i32
    boneWeights: *f32
    vaoId: u32
    vboId: [7]u32
}

@foreign public struct Shader {
    id: u32
    locs: [MAX_SHADER_LOCATIONS]i32
}

@foreign public struct MaterialMap {
    texture: Texture2D
    color: Color
    value: f32
}

@foreign public struct Material {
    shader: Shader
    maps: [MAX_MATERIAL_MAPS]MaterialMap
    params: *f32
}

@foreign public struct Transform {
    translation: Vector3
    rotation: Quaternion
    scale: Vector3
}

@foreign public struct BoneInfo {
    name: [32]char
    parent: i32
}

@foreign public struct Model {
    transform: Matrix
    meshCount: i32
    meshes: *Mesh
    materialCount: i32
    materials: *Material
    meshMaterial: *i32
    boneCount: i32
    bones: *BoneInfo
    bindPose: *Transform
}

@foreign public struct ModelAnimation {
    boneCount: i32
    bones: *BoneInfo
    frameCount: i32
    framePoses: **Transform
}

@foreign public struct Ray {
    position: Vector3
    direction: Vector3
}

@foreign public struct RayHitInfo {
    hit: bool
    distance: f32
    position: Vector3
    normal: Vector3
}

@foreign public struct BoundingBox {
    min: Vector3
    max: Vector3
}

@foreign public struct Wave {
    sampleCount: u32
    sampleRate: u32
    sampleSize: u32
    channels: u32
    data: *void
}

@foreign public struct Sound {
    audioBuffer: *void
    source: u32
    buffer: u32
    format: i32
}

@foreign public struct AudioStream {
    sampleRate: u32
    sampleSize: u32
    channels: u32
    audioBuffer: *void
    format: i32
    source: u32
    buffers: [2]u32
}

@foreign public struct VrDeviceInfo {
    hResolution: i32
    vResolution: i32
    hScreenSize: f32
    vScreenSize: f32
    vScreenCenter: f32
    eyeToScreenDistance: f32
    lensSeparationDistance: f32
    interpupillaryDistance: f32
    lensDistortionValues: [4]f32
    chromaAbCorrection: [4]f32
}

@foreign public enum ConfigFlag {
    FLAG_SHOW_LOGO          = 1,    // Set to show raylib logo at startup
    FLAG_FULLSCREEN_MODE    = 2,    // Set to run program in fullscreen
    FLAG_WINDOW_RESIZABLE   = 4,    // Set to allow resizable window
    FLAG_WINDOW_UNDECORATED = 8,    // Set to disable window decoration (frame and buttons)
    FLAG_WINDOW_TRANSPARENT = 16,   // Set to allow transparent window
    FLAG_WINDOW_HIDDEN      = 128,  // Set to create the window initially hidden
    FLAG_MSAA_4X_HINT       = 32,   // Set to try enabling MSAA 4X
    FLAG_VSYNC_HINT         = 64    // Set to try enabling V-Sync on GPU
}

@foreign public enum TraceLogType {
    LOG_ALL = 0,        // Display all logs
    LOG_TRACE,
    LOG_DEBUG,
    LOG_INFO,
    LOG_WARNING,
    LOG_ERROR,
    LOG_FATAL,
    LOG_NONE            // Disable logging
}

@foreign public enum KeyboardKey {
    KEY_APOSTROPHE      = 39,
    KEY_COMMA           = 44,
    KEY_MINUS           = 45,
    KEY_PERIOD          = 46,
    KEY_SLASH           = 47,
    KEY_ZERO            = 48,
    KEY_ONE             = 49,
    KEY_TWO             = 50,
    KEY_THREE           = 51,
    KEY_FOUR            = 52,
    KEY_FIVE            = 53,
    KEY_SIX             = 54,
    KEY_SEVEN           = 55,
    KEY_EIGHT           = 56,
    KEY_NINE            = 57,
    KEY_SEMICOLON       = 59,
    KEY_EQUAL           = 61,
    KEY_A               = 65,
    KEY_B               = 66,
    KEY_C               = 67,
    KEY_D               = 68,
    KEY_E               = 69,
    KEY_F               = 70,
    KEY_G               = 71,
    KEY_H               = 72,
    KEY_I               = 73,
    KEY_J               = 74,
    KEY_K               = 75,
    KEY_L               = 76,
    KEY_M               = 77,
    KEY_N               = 78,
    KEY_O               = 79,
    KEY_P               = 80,
    KEY_Q               = 81,
    KEY_R               = 82,
    KEY_S               = 83,
    KEY_T               = 84,
    KEY_U               = 85,
    KEY_V               = 86,
    KEY_W               = 87,
    KEY_X               = 88,
    KEY_Y               = 89,
    KEY_Z               = 90,
    KEY_SPACE           = 32,
    KEY_ESCAPE          = 256,
    KEY_ENTER           = 257,
    KEY_TAB             = 258,
    KEY_BACKSPACE       = 259,
    KEY_INSERT          = 260,
    KEY_DELETE          = 261,
    KEY_RIGHT           = 262,
    KEY_LEFT            = 263,
    KEY_DOWN            = 264,
    KEY_UP              = 265,
    KEY_PAGE_UP         = 266,
    KEY_PAGE_DOWN       = 267,
    KEY_HOME            = 268,
    KEY_END             = 269,
    KEY_CAPS_LOCK       = 280,
    KEY_SCROLL_LOCK     = 281,
    KEY_NUM_LOCK        = 282,
    KEY_PRINT_SCREEN    = 283,
    KEY_PAUSE           = 284,
    KEY_F1              = 290,
    KEY_F2              = 291,
    KEY_F3              = 292,
    KEY_F4              = 293,
    KEY_F5              = 294,
    KEY_F6              = 295,
    KEY_F7              = 296,
    KEY_F8              = 297,
    KEY_F9              = 298,
    KEY_F10             = 299,
    KEY_F11             = 300,
    KEY_F12             = 301,
    KEY_LEFT_SHIFT      = 340,
    KEY_LEFT_CONTROL    = 341,
    KEY_LEFT_ALT        = 342,
    KEY_LEFT_SUPER      = 343,
    KEY_RIGHT_SHIFT     = 344,
    KEY_RIGHT_CONTROL   = 345,
    KEY_RIGHT_ALT       = 346,
    KEY_RIGHT_SUPER     = 347,
    KEY_KB_MENU         = 348,
    KEY_LEFT_BRACKET    = 91,
    KEY_BACKSLASH       = 92,
    KEY_RIGHT_BRACKET   = 93,
    KEY_GRAVE           = 96,
    KEY_KP_0            = 320,
    KEY_KP_1            = 321,
    KEY_KP_2            = 322,
    KEY_KP_3            = 323,
    KEY_KP_4            = 324,
    KEY_KP_5            = 325,
    KEY_KP_6            = 326,
    KEY_KP_7            = 327,
    KEY_KP_8            = 328,
    KEY_KP_9            = 329,
    KEY_KP_DECIMAL      = 330,
    KEY_KP_DIVIDE       = 331,
    KEY_KP_MULTIPLY     = 332,
    KEY_KP_SUBTRACT     = 333,
    KEY_KP_ADD          = 334,
    KEY_KP_ENTER        = 335,
    KEY_KP_EQUAL        = 336
}

@foreign public enum AndroidButton {
    KEY_BACK            = 4,
    KEY_MENU            = 82,
    KEY_VOLUME_UP       = 24,
    KEY_VOLUME_DOWN     = 25
}

@foreign public enum MouseButton {
    MOUSE_LEFT_BUTTON   = 0,
    MOUSE_RIGHT_BUTTON  = 1,
    MOUSE_MIDDLE_BUTTON = 2
}

@foreign public enum GamepadNumber {
    GAMEPAD_PLAYER1     = 0,
    GAMEPAD_PLAYER2     = 1,
    GAMEPAD_PLAYER3     = 2,
    GAMEPAD_PLAYER4     = 3
}

@foreign public enum GamepadButton {
    GAMEPAD_BUTTON_UNKNOWN = 0,
    GAMEPAD_BUTTON_LEFT_FACE_UP,
    GAMEPAD_BUTTON_LEFT_FACE_RIGHT,
    GAMEPAD_BUTTON_LEFT_FACE_DOWN,
    GAMEPAD_BUTTON_LEFT_FACE_LEFT,
    GAMEPAD_BUTTON_RIGHT_FACE_UP,
    GAMEPAD_BUTTON_RIGHT_FACE_RIGHT,
    GAMEPAD_BUTTON_RIGHT_FACE_DOWN,
    GAMEPAD_BUTTON_RIGHT_FACE_LEFT,
    GAMEPAD_BUTTON_LEFT_TRIGGER_1,
    GAMEPAD_BUTTON_LEFT_TRIGGER_2,
    GAMEPAD_BUTTON_RIGHT_TRIGGER_1,
    GAMEPAD_BUTTON_RIGHT_TRIGGER_2,
    GAMEPAD_BUTTON_MIDDLE_LEFT,     //PS3 Select
    GAMEPAD_BUTTON_MIDDLE,          //PS Button/XBOX Button
    GAMEPAD_BUTTON_MIDDLE_RIGHT,    //PS3 Start
    GAMEPAD_BUTTON_LEFT_THUMB,
    GAMEPAD_BUTTON_RIGHT_THUMB
}

@foreign public enum GamepadAxis {
    GAMEPAD_AXIS_UNKNOWN = 0,
    GAMEPAD_AXIS_LEFT_X,
    GAMEPAD_AXIS_LEFT_Y,
    GAMEPAD_AXIS_RIGHT_X,
    GAMEPAD_AXIS_RIGHT_Y,
    GAMEPAD_AXIS_LEFT_TRIGGER,      // [1..-1] (pressure-level)
    GAMEPAD_AXIS_RIGHT_TRIGGER      // [1..-1] (pressure-level)
}

@foreign public enum ShaderLocationIndex {
    LOC_VERTEX_POSITION = 0,
    LOC_VERTEX_TEXCOORD01,
    LOC_VERTEX_TEXCOORD02,
    LOC_VERTEX_NORMAL,
    LOC_VERTEX_TANGENT,
    LOC_VERTEX_COLOR,
    LOC_MATRIX_MVP,
    LOC_MATRIX_MODEL,
    LOC_MATRIX_VIEW,
    LOC_MATRIX_PROJECTION,
    LOC_VECTOR_VIEW,
    LOC_COLOR_DIFFUSE,
    LOC_COLOR_SPECULAR,
    LOC_COLOR_AMBIENT,
    LOC_MAP_ALBEDO,          // LOC_MAP_DIFFUSE
    LOC_MAP_METALNESS,       // LOC_MAP_SPECULAR
    LOC_MAP_NORMAL,
    LOC_MAP_ROUGHNESS,
    LOC_MAP_OCCLUSION,
    LOC_MAP_EMISSION,
    LOC_MAP_HEIGHT,
    LOC_MAP_CUBEMAP,
    LOC_MAP_IRRADIANCE,
    LOC_MAP_PREFILTER,
    LOC_MAP_BRDF
}

@foreign public enum ShaderUniformDataType {
    UNIFORM_FLOAT = 0,
    UNIFORM_VEC2,
    UNIFORM_VEC3,
    UNIFORM_VEC4,
    UNIFORM_INT,
    UNIFORM_IVEC2,
    UNIFORM_IVEC3,
    UNIFORM_IVEC4,
    UNIFORM_SAMPLER2D
}

@foreign public enum MaterialMapType {
    MAP_ALBEDO    = 0,       // MAP_DIFFUSE
    MAP_METALNESS = 1,       // MAP_SPECULAR
    MAP_NORMAL    = 2,
    MAP_ROUGHNESS = 3,
    MAP_OCCLUSION,
    MAP_EMISSION,
    MAP_HEIGHT,
    MAP_CUBEMAP,             // NOTE: Uses GL_TEXTURE_CUBE_MAP
    MAP_IRRADIANCE,          // NOTE: Uses GL_TEXTURE_CUBE_MAP
    MAP_PREFILTER,           // NOTE: Uses GL_TEXTURE_CUBE_MAP
    MAP_BRDF
}

@foreign public enum PixelFormat {
    UNCOMPRESSED_GRAYSCALE = 1,     // 8 bit per pixel (no alpha)
    UNCOMPRESSED_GRAY_ALPHA,        // 8*2 bpp (2 channels)
    UNCOMPRESSED_R5G6B5,            // 16 bpp
    UNCOMPRESSED_R8G8B8,            // 24 bpp
    UNCOMPRESSED_R5G5B5A1,          // 16 bpp (1 bit alpha)
    UNCOMPRESSED_R4G4B4A4,          // 16 bpp (4 bit alpha)
    UNCOMPRESSED_R8G8B8A8,          // 32 bpp
    UNCOMPRESSED_R32,               // 32 bpp (1 channel - float)
    UNCOMPRESSED_R32G32B32,         // 32*3 bpp (3 channels - float)
    UNCOMPRESSED_R32G32B32A32,      // 32*4 bpp (4 channels - float)
    COMPRESSED_DXT1_RGB,            // 4 bpp (no alpha)
    COMPRESSED_DXT1_RGBA,           // 4 bpp (1 bit alpha)
    COMPRESSED_DXT3_RGBA,           // 8 bpp
    COMPRESSED_DXT5_RGBA,           // 8 bpp
    COMPRESSED_ETC1_RGB,            // 4 bpp
    COMPRESSED_ETC2_RGB,            // 4 bpp
    COMPRESSED_ETC2_EAC_RGBA,       // 8 bpp
    COMPRESSED_PVRT_RGB,            // 4 bpp
    COMPRESSED_PVRT_RGBA,           // 4 bpp
    COMPRESSED_ASTC_4x4_RGBA,       // 8 bpp
    COMPRESSED_ASTC_8x8_RGBA        // 2 bpp
}

@foreign public enum TextureFilterMode {
    FILTER_POINT = 0,               // No filter, just pixel aproximation
    FILTER_BILINEAR,                // Linear filtering
    FILTER_TRILINEAR,               // Trilinear filtering (linear with mipmaps)
    FILTER_ANISOTROPIC_4X,          // Anisotropic filtering 4x
    FILTER_ANISOTROPIC_8X,          // Anisotropic filtering 8x
    FILTER_ANISOTROPIC_16X,         // Anisotropic filtering 16x
}

@foreign public enum CubemapLayoutType {
    CUBEMAP_AUTO_DETECT = 0,        // Automatically detect layout type
    CUBEMAP_LINE_VERTICAL,          // Layout is defined by a vertical line with faces
    CUBEMAP_LINE_HORIZONTAL,        // Layout is defined by an horizontal line with faces
    CUBEMAP_CROSS_THREE_BY_FOUR,    // Layout is defined by a 3x4 cross with cubemap faces
    CUBEMAP_CROSS_FOUR_BY_THREE,    // Layout is defined by a 4x3 cross with cubemap faces
    CUBEMAP_PANORAMA                // Layout is defined by a panorama image (equirectangular map)
}

@foreign public enum TextureWrapMode {
    WRAP_REPEAT = 0,        // Repeats texture in tiled mode
    WRAP_CLAMP,             // Clamps texture to edge pixel in tiled mode
    WRAP_MIRROR_REPEAT,     // Mirrors and repeats the texture in tiled mode
    WRAP_MIRROR_CLAMP       // Mirrors and clamps to border the texture in tiled mode
}

@foreign public enum FontType {
    FONT_DEFAULT = 0,       // Default font generation, anti-aliased
    FONT_BITMAP,            // Bitmap font generation, no anti-aliasing
    FONT_SDF                // SDF font generation, requires external shader
}

@foreign public enum BlendMode {
    BLEND_ALPHA = 0,        // Blend textures considering alpha (default)
    BLEND_ADDITIVE,         // Blend textures adding colors
    BLEND_MULTIPLIED        // Blend textures multiplying colors
}

@foreign public enum GestureType {
    GESTURE_NONE        = 0,
    GESTURE_TAP         = 1,
    GESTURE_DOUBLETAP   = 2,
    GESTURE_HOLD        = 4,
    GESTURE_DRAG        = 8,
    GESTURE_SWIPE_RIGHT = 16,
    GESTURE_SWIPE_LEFT  = 32,
    GESTURE_SWIPE_UP    = 64,
    GESTURE_SWIPE_DOWN  = 128,
    GESTURE_PINCH_IN    = 256,
    GESTURE_PINCH_OUT   = 512
}

@foreign public enum CameraMode {
    CAMERA_CUSTOM = 0,
    CAMERA_FREE,
    CAMERA_ORBITAL,
    CAMERA_FIRST_PERSON,
    CAMERA_THIRD_PERSON
}

@foreign public enum CameraType {
    CAMERA_PERSPECTIVE = 0,
    CAMERA_ORTHOGRAPHIC
}

@foreign public enum NPatchType {
    NPT_9PATCH = 0,         // Npatch defined by 3x3 tiles
    NPT_3PATCH_VERTICAL,    // Npatch defined by 1x3 tiles
    NPT_3PATCH_HORIZONTAL   // Npatch defined by 3x1 tiles
}

@foreign public const RAYWHITE: Color;
@foreign public const LIGHTGRAY: Color;
@foreign public const GRAY: Color;
@foreign public const DARKGRAY: Color;
@foreign public const YELLOW: Color;
@foreign public const GOLD: Color;
@foreign public const ORANGE: Color;
@foreign public const PINK: Color;
@foreign public const RED: Color;
@foreign public const MAROON: Color;
@foreign public const GREEN: Color;
@foreign public const LIME: Color;
@foreign public const DARKGREEN: Color;
@foreign public const SKYBLUE: Color;
@foreign public const BLUE: Color;
@foreign public const DARKBLUE: Color;
@foreign public const PURPLE: Color;
@foreign public const VIOLET: Color;
@foreign public const DARKPURPLE: Color;
@foreign public const BEIGE: Color;
@foreign public const BROWN: Color;
@foreign public const DARKBROWN: Color;
@foreign public const WHITE: Color;
@foreign public const BLACK: Color;
@foreign public const BLANK: Color;
@foreign public const MAGENTA: Color;


/*
==================================================================
RayLib Functions
==================================================================
*/


@foreign public func InitWindow(width: i32, height: i32, title: *const char) : void;
@foreign public func WindowShouldClose() : bool;
@foreign public func CloseWindow() : void;
@foreign public func IsWindowReady() : bool;
@foreign public func IsWindowMinimized() : bool;
@foreign public func IsWindowResized() : bool;
@foreign public func IsWindowHidden() : bool;
@foreign public func ToggleFullscreen() : void;
@foreign public func UnhideWindow() : void;
@foreign public func HideWindow() : void;
@foreign public func SetWindowIcon(image: Image) : void;
@foreign public func SetWindowTitle(title: *const char) : void;
@foreign public func SetWindowPosition(x: i32, y: i32) : void;
@foreign public func SetWindowMonitor(monitor: i32) : void;
@foreign public func SetWindowMinSize(width: i32, height: i32) : void;
@foreign public func SetWindowSize(width: i32, height: i32) : void;
@foreign public func GetWindowHandle() : *void;
@foreign public func GetScreenWidth() : i32;
@foreign public func GetScreenHeight() : i32;
@foreign public func GetMonitorCount() : i32;
@foreign public func GetMonitorWidth(monitor: i32) : i32;
@foreign public func GetMonitorHeight(monitor: i32) : i32;
@foreign public func GetMonitorPhysicalWidth(monitor: i32) : i32;
@foreign public func GetMonitorPhysicalHeight(monitor: i32) : i32;
@foreign public func GetMonitorName(monitor: i32) : *const char;
@foreign public func GetClipboardText() : *const char;
@foreign public func SetClipboardText(text: *const char) : void;
@foreign public func ShowCursor() : void;
@foreign public func HideCursor() : void;
@foreign public func IsCursorHidden() : bool;
@foreign public func EnableCursor() : void;
@foreign public func DisableCursor() : void;
@foreign public func ClearBackground(color: Color) : void;
@foreign public func BeginDrawing() : void;
@foreign public func EndDrawing() : void;
@foreign public func BeginMode2D(camera: Camera2D) : void;
@foreign public func EndMode2D() : void;
@foreign public func BeginMode3D(camera: Camera3D) : void;
@foreign public func EndMode3D() : void;
@foreign public func BeginTextureMode(target: RenderTexture2D) : void;
@foreign public func EndTextureMode() : void;
@foreign public func GetMouseRay(mousePosition: Vector2, camera: Camera) : Ray;
@foreign public func GetWorldToScreen(position: Vector3, camera: Camera) : Vector2;
@foreign public func GetCameraMatrix(camera: Camera) : Matrix;
@foreign public func SetTargetFPS(fps: i32) : void;
@foreign public func GetFPS() : i32;
@foreign public func GetFrameTime() : f32;
@foreign public func GetTime() : f64;
@foreign public func ColorToInt(color: Color) : i32;
@foreign public func ColorNormalize(color: Color) : Vector4;
@foreign public func ColorToHSV(color: Color) : Vector3;
@foreign public func ColorFromHSV(hsv: Vector3) : Color;
@foreign public func GetColor(hexValue: i32) : Color;
@foreign public func Fade(color: Color, alpha: f32) : Color;
@foreign public func SetConfigFlags(flags: u8) : void;
@foreign public func SetTraceLogLevel(logType: i32) : void;
@foreign public func SetTraceLogExit(logType: i32) : void;
@foreign public func SetTraceLogCallback(callback: TraceLogCallback) : void;
@foreign public func TraceLog(logType: i32, text: *const char, ...) : void;
@foreign public func TakeScreenshot(fileName: *const char) : void;
@foreign public func GetRandomValue(min: i32, max: i32) : i32;
@foreign public func FileExists(fileName: *const char) : bool;
@foreign public func IsFileExtension(fileName: *const char, ext: *const char) : bool;
@foreign public func GetExtension(fileName: *const char) : *const char;
@foreign public func GetFileName(filePath: *const char) : *const char;
@foreign public func GetFileNameWithoutExt(filePath: *const char) : *const char;
@foreign public func GetDirectoryPath(fileName: *const char) : *const char;
@foreign public func GetWorkingDirectory() : *const char;
@foreign public func GetDirectoryFiles(dirPath: *const char, count: *i32) : **char;
@foreign public func ClearDirectoryFiles() : void;
@foreign public func ChangeDirectory(dir: *const char) : bool;
@foreign public func IsFileDropped() : bool;
@foreign public func GetDroppedFiles(count: *i32) : **char;
@foreign public func ClearDroppedFiles() : void;
@foreign public func GetFileModTime(fileName: *const char) : i64;
@foreign public func StorageSaveValue(position: i32, value: i32) : void;
@foreign public func StorageLoadValue(position: i32) : i32;
@foreign public func OpenURL(url: *const char) : void;
@foreign public func IsKeyPressed(key: i32) : bool;
@foreign public func IsKeyDown(key: i32) : bool;
@foreign public func IsKeyReleased(key: i32) : bool;
@foreign public func IsKeyUp(key: i32) : bool;
@foreign public func GetKeyPressed() : i32;
@foreign public func SetExitKey(key: i32) : void;
@foreign public func IsGamepadAvailable(gamepad: i32) : bool;
@foreign public func IsGamepadName(gamepad: i32, name: *const char) : bool;
@foreign public func GetGamepadName(gamepad: i32) : *const char;
@foreign public func IsGamepadButtonPressed(gamepad: i32, button: i32) : bool;
@foreign public func IsGamepadButtonDown(gamepad: i32, button: i32) : bool;
@foreign public func IsGamepadButtonReleased(gamepad: i32, button: i32) : bool;
@foreign public func IsGamepadButtonUp(gamepad: i32, button: i32) : bool;
@foreign public func GetGamepadButtonPressed() : i32;
@foreign public func GetGamepadAxisCount(gamepad: i32) : i32;
@foreign public func GetGamepadAxisMovement(gamepad: i32, axis: i32) : f32;
@foreign public func IsMouseButtonPressed(button: i32) : bool;
@foreign public func IsMouseButtonDown(button: i32) : bool;
@foreign public func IsMouseButtonReleased(button: i32) : bool;
@foreign public func IsMouseButtonUp(button: i32) : bool;
@foreign public func GetMouseX() : i32;
@foreign public func GetMouseY() : i32;
@foreign public func GetMousePosition() : Vector2;
@foreign public func SetMousePosition(x: i32, y: i32) : void;
@foreign public func SetMouseOffset(offsetX: i32, offsetY: i32) : void;
@foreign public func SetMouseScale(scaleX: f32, scaleY: f32) : void;
@foreign public func GetMouseWheelMove() : i32;
@foreign public func GetTouchX() : i32;
@foreign public func GetTouchY() : i32;
@foreign public func GetTouchPosition(index: i32) : Vector2;
@foreign public func SetGesturesEnabled(gestureFlags: u32) : void;
@foreign public func IsGestureDetected(gesture: i32) : bool;
@foreign public func GetGestureDetected() : i32;
@foreign public func GetTouchPointsCount() : i32;
@foreign public func GetGestureHoldDuration() : f32;
@foreign public func GetGestureDragVector() : Vector2;
@foreign public func GetGestureDragAngle() : f32;
@foreign public func GetGesturePinchVector() : Vector2;
@foreign public func GetGesturePinchAngle() : f32;
@foreign public func SetCameraMode(camera: Camera, mode: i32) : void;
@foreign public func UpdateCamera(camera: *Camera) : void;
@foreign public func SetCameraPanControl(panKey: i32) : void;
@foreign public func SetCameraAltControl(altKey: i32) : void;
@foreign public func SetCameraSmoothZoomControl(szKey: i32) : void;
@foreign public func SetCameraMoveControls(frontKey: i32, backKey: i32, rightKey: i32, leftKey: i32, upKey: i32, downKey: i32) : void;
@foreign public func DrawPixel(posX: i32, posY: i32, color: Color) : void;
@foreign public func DrawPixelV(position: Vector2, color: Color) : void;
@foreign public func DrawLine(startPosX: i32, startPosY: i32, endPosX: i32, endPosY: i32, color: Color) : void;
@foreign public func DrawLineV(startPos: Vector2, endPos: Vector2, color: Color) : void;
@foreign public func DrawLineEx(startPos: Vector2, endPos: Vector2, thick: f32, color: Color) : void;
@foreign public func DrawLineBezier(startPos: Vector2, endPos: Vector2, thick: f32, color: Color) : void;
@foreign public func DrawLineStrip(points: *Vector2, numPoints: i32, color: Color) : void;
@foreign public func DrawCircle(centerX: i32, centerY: i32, radius: f32, color: Color) : void;
@foreign public func DrawCircleSector(center: Vector2, radius: f32, startAngle: i32, endAngle: i32, segments: i32, color: Color) : void;
@foreign public func DrawCircleSectorLines(center: Vector2, radius: f32, startAngle: i32, endAngle: i32, segments: i32, color: Color) : void;
@foreign public func DrawCircleGradient(centerX: i32, centerY: i32, radius: f32, color1: Color, color2: Color) : void;
@foreign public func DrawCircleV(center: Vector2, radius: f32, color: Color) : void;
@foreign public func DrawCircleLines(centerX: i32, centerY: i32, radius: f32, color: Color) : void;
@foreign public func DrawRing(center: Vector2, innerRadius: f32, outerRadius: f32, startAngle: i32, endAngle: i32, segments: i32, color: Color) : void;
@foreign public func DrawRingLines(center: Vector2, innerRadius: f32, outerRadius: f32, startAngle: i32, endAngle: i32, segments: i32, color: Color) : void;
@foreign public func DrawRectangle(posX: i32, posY: i32, width: i32, height: i32, color: Color) : void;
@foreign public func DrawRectangleV(position: Vector2, size: Vector2, color: Color) : void;
@foreign public func DrawRectangleRec(rec: Rectangle, color: Color) : void;
@foreign public func DrawRectanglePro(rec: Rectangle, origin: Vector2, rotation: f32, color: Color) : void;
@foreign public func DrawRectangleGradientV(posX: i32, posY: i32, width: i32, height: i32, color1: Color, color2: Color) : void;
@foreign public func DrawRectangleGradientH(posX: i32, posY: i32, width: i32, height: i32, color1: Color, color2: Color) : void;
@foreign public func DrawRectangleGradientEx(rec: Rectangle, col1: Color, col2: Color, col3: Color, col4: Color) : void;
@foreign public func DrawRectangleLines(posX: i32, posY: i32, width: i32, height: i32, color: Color) : void;
@foreign public func DrawRectangleLinesEx(rec: Rectangle, lineThick: i32, color: Color) : void;
@foreign public func DrawRectangleRounded(rec: Rectangle, roundness: f32, segments: i32, color: Color) : void;
@foreign public func DrawRectangleRoundedLines(rec: Rectangle, roundness: f32, segments: i32, lineThick: i32, color: Color) : void;
@foreign public func DrawTriangle(v1: Vector2, v2: Vector2, v3: Vector2, color: Color) : void;
@foreign public func DrawTriangleLines(v1: Vector2, v2: Vector2, v3: Vector2, color: Color) : void;
@foreign public func DrawTriangleFan(points: *Vector2, numPoints: i32, color: Color) : void;
@foreign public func DrawPoly(center: Vector2, sides: i32, radius: f32, rotation: f32, color: Color) : void;
@foreign public func SetShapesTexture(texture: Texture2D, source: Rectangle) : void;
@foreign public func CheckCollisionRecs(rec1: Rectangle, rec2: Rectangle) : bool;
@foreign public func CheckCollisionCircles(center1: Vector2, radius1: f32, center2: Vector2, radius2: f32) : bool;
@foreign public func CheckCollisionCircleRec(center: Vector2, radius: f32, rec: Rectangle) : bool;
@foreign public func GetCollisionRec(rec1: Rectangle, rec2: Rectangle) : Rectangle;
@foreign public func CheckCollisionPointRec(point: Vector2, rec: Rectangle) : bool;
@foreign public func CheckCollisionPointCircle(point: Vector2, center: Vector2, radius: f32) : bool;
@foreign public func CheckCollisionPointTriangle(point: Vector2, p1: Vector2, p2: Vector2, p3: Vector2) : bool;
@foreign public func LoadImage(fileName: *const char) : Image;
@foreign public func LoadImageEx(pixels: *Color, width: i32, height: i32) : Image;
@foreign public func LoadImagePro(data: *void, width: i32, height: i32, format: i32) : Image;
@foreign public func LoadImageRaw(fileName: *const char, width: i32, height: i32, format: i32, headerSize: i32) : Image;
@foreign public func ExportImage(image: Image, fileName: *const char) : void;
@foreign public func ExportImageAsCode(image: Image, fileName: *const char) : void;
@foreign public func LoadTexture(fileName: *const char) : Texture2D;
@foreign public func LoadTextureFromImage(image: Image) : Texture2D;
@foreign public func LoadTextureCubemap(image: Image, layoutType: i32) : TextureCubemap;
@foreign public func LoadRenderTexture(width: i32, height: i32) : RenderTexture2D;
@foreign public func UnloadImage(image: Image) : void;
@foreign public func UnloadTexture(texture: Texture2D) : void;
@foreign public func UnloadRenderTexture(target: RenderTexture2D) : void;
@foreign public func GetImageData(image: Image) : *Color;
@foreign public func GetImageDataNormalized(image: Image) : *Vector4;
@foreign public func GetPixelDataSize(width: i32, height: i32, format: i32) : i32;
@foreign public func GetTextureData(texture: Texture2D) : Image;
@foreign public func GetScreenData() : Image;
@foreign public func UpdateTexture(texture: Texture2D, pixels: *const void) : void;
@foreign public func ImageCopy(image: Image) : Image;
@foreign public func ImageToPOT(image: *Image, fillColor: Color) : void;
@foreign public func ImageFormat(image: *Image, newFormat: i32) : void;
@foreign public func ImageAlphaMask(image: *Image, alphaMask: Image) : void;
@foreign public func ImageAlphaClear(image: *Image, color: Color, threshold: f32) : void;
@foreign public func ImageAlphaCrop(image: *Image, threshold: f32) : void;
@foreign public func ImageAlphaPremultiply(image: *Image) : void;
@foreign public func ImageCrop(image: *Image, crop: Rectangle) : void;
@foreign public func ImageResize(image: *Image, newWidth: i32, newHeight: i32) : void;
@foreign public func ImageResizeNN(image: *Image, newWidth: i32, newHeight: i32) : void;
@foreign public func ImageResizeCanvas(image: *Image, newWidth: i32, newHeight: i32, offsetX: i32, offsetY: i32, color: Color) : void;
@foreign public func ImageMipmaps(image: *Image) : void;
@foreign public func ImageDither(image: *Image, rBpp: i32, gBpp: i32, bBpp: i32, aBpp: i32) : void;
@foreign public func ImageExtractPalette(image: Image, maxPaletteSize: i32, extractCount: *i32) : *Color;
@foreign public func ImageText(text: *const char, fontSize: i32, color: Color) : Image;
@foreign public func ImageTextEx(font: Font, text: *const char, fontSize: f32, spacing: f32, tint: Color) : Image;
@foreign public func ImageDraw(dst: *Image, src: Image, srcRec: Rectangle, dstRec: Rectangle) : void;
@foreign public func ImageDrawRectangle(dst: *Image, rec: Rectangle, color: Color) : void;
@foreign public func ImageDrawRectangleLines(dst: *Image, rec: Rectangle, thick: i32, color: Color) : void;
@foreign public func ImageDrawText(dst: *Image, position: Vector2, text: *const char, fontSize: i32, color: Color) : void;
@foreign public func ImageDrawTextEx(dst: *Image, position: Vector2, font: Font, text: *const char, fontSize: f32, spacing: f32, color: Color) : void;
@foreign public func ImageFlipVertical(image: *Image) : void;
@foreign public func ImageFlipHorizontal(image: *Image) : void;
@foreign public func ImageRotateCW(image: *Image) : void;
@foreign public func ImageRotateCCW(image: *Image) : void;
@foreign public func ImageColorTint(image: *Image, color: Color) : void;
@foreign public func ImageColorInvert(image: *Image) : void;
@foreign public func ImageColorGrayscale(image: *Image) : void;
@foreign public func ImageColorContrast(image: *Image, contrast: f32) : void;
@foreign public func ImageColorBrightness(image: *Image, brightness: i32) : void;
@foreign public func ImageColorReplace(image: *Image, color: Color, replace: Color) : void;
@foreign public func GenImageColor(width: i32, height: i32, color: Color) : Image;
@foreign public func GenImageGradientV(width: i32, height: i32, top: Color, bottom: Color) : Image;
@foreign public func GenImageGradientH(width: i32, height: i32, left: Color, right: Color) : Image;
@foreign public func GenImageGradientRadial(width: i32, height: i32, density: f32, inner: Color, outer: Color) : Image;
@foreign public func GenImageChecked(width: i32, height: i32, checksX: i32, checksY: i32, col1: Color, col2: Color) : Image;
@foreign public func GenImageWhiteNoise(width: i32, height: i32, factor: f32) : Image;
@foreign public func GenImagePerlinNoise(width: i32, height: i32, offsetX: i32, offsetY: i32, scale: f32) : Image;
@foreign public func GenImageCellular(width: i32, height: i32, tileSize: i32) : Image;
@foreign public func GenTextureMipmaps(texture: *Texture2D) : void;
@foreign public func SetTextureFilter(texture: Texture2D, filterMode: i32) : void;
@foreign public func SetTextureWrap(texture: Texture2D, wrapMode: i32) : void;
@foreign public func DrawTexture(texture: Texture2D, posX: i32, posY: i32, tint: Color) : void;
@foreign public func DrawTextureV(texture: Texture2D, position: Vector2, tint: Color) : void;
@foreign public func DrawTextureEx(texture: Texture2D, position: Vector2, rotation: f32, scale: f32, tint: Color) : void;
@foreign public func DrawTextureRec(texture: Texture2D, sourceRec: Rectangle, position: Vector2, tint: Color) : void;
@foreign public func DrawTextureQuad(texture: Texture2D, tiling: Vector2, offset: Vector2, quad: Rectangle, tint: Color) : void;
@foreign public func DrawTexturePro(texture: Texture2D, sourceRec: Rectangle, destRec: Rectangle, origin: Vector2, rotation: f32, tint: Color) : void;
@foreign public func DrawTextureNPatch(texture: Texture2D, nPatchInfo: NPatchInfo, destRec: Rectangle, origin: Vector2, rotation: f32, tint: Color) : void;
@foreign public func GetFontDefault() : Font;
@foreign public func LoadFont(fileName: *const char) : Font;
@foreign public func LoadFontEx(fileName: *const char, fontSize: i32, fontChars: *i32, charsCount: i32) : Font;
@foreign public func LoadFontFromImage(image: Image, key: Color, firstChar: i32) : Font;
@foreign public func LoadFontData(fileName: *const char, fontSize: i32, fontChars: *i32, charsCount: i32, type: i32) : *CharInfo;
@foreign public func GenImageFontAtlas(chars: *CharInfo, charsCount: i32, fontSize: i32, padding: i32, packMethod: i32) : Image;
@foreign public func UnloadFont(font: Font) : void;
@foreign public func DrawFPS(posX: i32, posY: i32) : void;
@foreign public func DrawText(text: *const char, posX: i32, posY: i32, fontSize: i32, color: Color) : void;
@foreign public func DrawTextEx(font: Font, text: *const char, position: Vector2, fontSize: f32, spacing: f32, tint: Color) : void;
@foreign public func DrawTextRec(font: Font, text: *const char, rec: Rectangle, fontSize: f32, spacing: f32, wordWrap: bool, tint: Color) : void;
@foreign public func DrawTextRecEx(font: Font, text: *const char, rec: Rectangle, fontSize: f32, spacing: f32, wordWrap: bool, tint: Color, selectStart: i32, selectLength: i32, selectText: Color, selectBack: Color) : void;
@foreign public func MeasureText(text: *const char, fontSize: i32) : i32;
@foreign public func MeasureTextEx(font: Font, text: *const char, fontSize: f32, spacing: f32) : Vector2;
@foreign public func GetGlyphIndex(font: Font, character: i32) : i32;
@foreign public func GetNextCodepoint(text: *const char, count: *i32) : i32;
@foreign public func TextIsEqual(text1: *const char, text2: *const char) : bool;
@foreign public func TextLength(text: *const char) : u32;
@foreign public func TextCountCodepoints(text: *const char) : u32;
@foreign public func TextFormat(text: *const char, ...) : *const char;
@foreign public func TextSubtext(text: *const char, position: i32, length: i32) : *const char;
@foreign public func TextReplace(text: *char, replace: *const char, by: *const char) : *const char;
@foreign public func TextInsert(text: *const char, insert: *const char, position: i32) : *const char;
@foreign public func TextJoin(textList: **const char, count: i32, delimiter: *const char) : *const char;
@foreign public func TextSplit(text: *const char, delimiter: char, count: *i32) : **const char;
@foreign public func TextAppend(text: *char, append: *const char, position: *i32) : void;
@foreign public func TextFindIndex(text: *const char, find: *const char) : i32;
@foreign public func TextToUpper(text: *const char) : *const char;
@foreign public func TextToLower(text: *const char) : *const char;
@foreign public func TextToPascal(text: *const char) : *const char;
@foreign public func TextToInteger(text: *const char) : i32;
@foreign public func DrawLine3D(startPos: Vector3, endPos: Vector3, color: Color) : void;
@foreign public func DrawCircle3D(center: Vector3, radius: f32, rotationAxis: Vector3, rotationAngle: f32, color: Color) : void;
@foreign public func DrawCube(position: Vector3, width: f32, height: f32, length: f32, color: Color) : void;
@foreign public func DrawCubeV(position: Vector3, size: Vector3, color: Color) : void;
@foreign public func DrawCubeWires(position: Vector3, width: f32, height: f32, length: f32, color: Color) : void;
@foreign public func DrawCubeWiresV(position: Vector3, size: Vector3, color: Color) : void;
@foreign public func DrawCubeTexture(texture: Texture2D, position: Vector3, width: f32, height: f32, length: f32, color: Color) : void;
@foreign public func DrawSphere(centerPos: Vector3, radius: f32, color: Color) : void;
@foreign public func DrawSphereEx(centerPos: Vector3, radius: f32, rings: i32, slices: i32, color: Color) : void;
@foreign public func DrawSphereWires(centerPos: Vector3, radius: f32, rings: i32, slices: i32, color: Color) : void;
@foreign public func DrawCylinder(position: Vector3, radiusTop: f32, radiusBottom: f32, height: f32, slices: i32, color: Color) : void;
@foreign public func DrawCylinderWires(position: Vector3, radiusTop: f32, radiusBottom: f32, height: f32, slices: i32, color: Color) : void;
@foreign public func DrawPlane(centerPos: Vector3, size: Vector2, color: Color) : void;
@foreign public func DrawRay(ray: Ray, color: Color) : void;
@foreign public func DrawGrid(slices: i32, spacing: f32) : void;
@foreign public func DrawGizmo(position: Vector3) : void;
@foreign public func LoadModel(fileName: *const char) : Model;
@foreign public func LoadModelFromMesh(mesh: Mesh) : Model;
@foreign public func UnloadModel(model: Model) : void;
@foreign public func LoadMeshes(fileName: *const char, meshCount: *i32) : *Mesh;
@foreign public func ExportMesh(mesh: Mesh, fileName: *const char) : void;
@foreign public func UnloadMesh(mesh: *Mesh) : void;
@foreign public func LoadMaterials(fileName: *const char, materialCount: *i32) : *Material;
@foreign public func LoadMaterialDefault() : Material;
@foreign public func UnloadMaterial(material: Material) : void;
@foreign public func SetMaterialTexture(material: *Material, mapType: i32, texture: Texture2D) : void;
@foreign public func SetModelMeshMaterial(model: *Model, meshId: i32, materialId: i32) : void;
@foreign public func LoadModelAnimations(fileName: *const char, animsCount: *i32) : *ModelAnimation;
@foreign public func UpdateModelAnimation(model: Model, anim: ModelAnimation, frame: i32) : void;
@foreign public func UnloadModelAnimation(anim: ModelAnimation) : void;
@foreign public func IsModelAnimationValid(model: Model, anim: ModelAnimation) : bool;
@foreign public func GenMeshPoly(sides: i32, radius: f32) : Mesh;
@foreign public func GenMeshPlane(width: f32, length: f32, resX: i32, resZ: i32) : Mesh;
@foreign public func GenMeshCube(width: f32, height: f32, length: f32) : Mesh;
@foreign public func GenMeshSphere(radius: f32, rings: i32, slices: i32) : Mesh;
@foreign public func GenMeshHemiSphere(radius: f32, rings: i32, slices: i32) : Mesh;
@foreign public func GenMeshCylinder(radius: f32, height: f32, slices: i32) : Mesh;
@foreign public func GenMeshTorus(radius: f32, size: f32, radSeg: i32, sides: i32) : Mesh;
@foreign public func GenMeshKnot(radius: f32, size: f32, radSeg: i32, sides: i32) : Mesh;
@foreign public func GenMeshHeightmap(heightmap: Image, size: Vector3) : Mesh;
@foreign public func GenMeshCubicmap(cubicmap: Image, cubeSize: Vector3) : Mesh;
@foreign public func MeshBoundingBox(mesh: Mesh) : BoundingBox;
@foreign public func MeshTangents(mesh: *Mesh) : void;
@foreign public func MeshBinormals(mesh: *Mesh) : void;
@foreign public func DrawModel(model: Model, position: Vector3, scale: f32, tint: Color) : void;
@foreign public func DrawModelEx(model: Model, position: Vector3, rotationAxis: Vector3, rotationAngle: f32, scale: Vector3, tint: Color) : void;
@foreign public func DrawModelWires(model: Model, position: Vector3, scale: f32, tint: Color) : void;
@foreign public func DrawModelWiresEx(model: Model, position: Vector3, rotationAxis: Vector3, rotationAngle: f32, scale: Vector3, tint: Color) : void;
@foreign public func DrawBoundingBox(box: BoundingBox, color: Color) : void;
@foreign public func DrawBillboard(camera: Camera, texture: Texture2D, center: Vector3, size: f32, tint: Color) : void;
@foreign public func DrawBillboardRec(camera: Camera, texture: Texture2D, sourceRec: Rectangle, center: Vector3, size: f32, tint: Color) : void;
@foreign public func CheckCollisionSpheres(centerA: Vector3, radiusA: f32, centerB: Vector3, radiusB: f32) : bool;
@foreign public func CheckCollisionBoxes(box1: BoundingBox, box2: BoundingBox) : bool;
@foreign public func CheckCollisionBoxSphere(box: BoundingBox, centerSphere: Vector3, radiusSphere: f32) : bool;
@foreign public func CheckCollisionRaySphere(ray: Ray, spherePosition: Vector3, sphereRadius: f32) : bool;
@foreign public func CheckCollisionRaySphereEx(ray: Ray, spherePosition: Vector3, sphereRadius: f32, collisionPoint: *Vector3) : bool;
@foreign public func CheckCollisionRayBox(ray: Ray, box: BoundingBox) : bool;
@foreign public func GetCollisionRayModel(ray: Ray, model: *Model) : RayHitInfo;
@foreign public func GetCollisionRayTriangle(ray: Ray, p1: Vector3, p2: Vector3, p3: Vector3) : RayHitInfo;
@foreign public func GetCollisionRayGround(ray: Ray, groundHeight: f32) : RayHitInfo;
@foreign public func LoadText(fileName: *const char) : *char;
@foreign public func LoadShader(vsFileName: *const char, fsFileName: *const char) : Shader;
@foreign public func LoadShaderCode(vsCode: *char, fsCode: *char) : Shader;
@foreign public func UnloadShader(shader: Shader) : void;
@foreign public func GetShaderDefault() : Shader;
@foreign public func GetTextureDefault() : Texture2D;
@foreign public func GetShaderLocation(shader: Shader, uniformName: *const char) : i32;
@foreign public func SetShaderValue(shader: Shader, uniformLoc: i32, value: *const void, uniformType: i32) : void;
@foreign public func SetShaderValueV(shader: Shader, uniformLoc: i32, value: *const void, uniformType: i32, count: i32) : void;
@foreign public func SetShaderValueMatrix(shader: Shader, uniformLoc: i32, mat: Matrix) : void;
@foreign public func SetShaderValueTexture(shader: Shader, uniformLoc: i32, texture: Texture2D) : void;
@foreign public func SetMatrixProjection(proj: Matrix) : void;
@foreign public func SetMatrixModelview(view: Matrix) : void;
@foreign public func GetMatrixModelview() : Matrix;
@foreign public func GenTextureCubemap(shader: Shader, skyHDR: Texture2D, size: i32) : Texture2D;
@foreign public func GenTextureIrradiance(shader: Shader, cubemap: Texture2D, size: i32) : Texture2D;
@foreign public func GenTexturePrefilter(shader: Shader, cubemap: Texture2D, size: i32) : Texture2D;
@foreign public func GenTextureBRDF(shader: Shader, size: i32) : Texture2D;
@foreign public func BeginShaderMode(shader: Shader) : void;
@foreign public func EndShaderMode() : void;
@foreign public func BeginBlendMode(mode: i32) : void;
@foreign public func EndBlendMode() : void;
@foreign public func BeginScissorMode(x: i32, y: i32, width: i32, height: i32) : void;
@foreign public func EndScissorMode() : void;
@foreign public func InitVrSimulator() : void;
@foreign public func CloseVrSimulator() : void;
@foreign public func UpdateVrTracking(camera: *Camera) : void;
@foreign public func SetVrConfiguration(info: VrDeviceInfo, distortion: Shader) : void;
@foreign public func IsVrSimulatorReady() : bool;
@foreign public func ToggleVrMode() : void;
@foreign public func BeginVrDrawing() : void;
@foreign public func EndVrDrawing() : void;
@foreign public func InitAudioDevice() : void;
@foreign public func CloseAudioDevice() : void;
@foreign public func IsAudioDeviceReady() : bool;
@foreign public func SetMasterVolume(volume: f32) : void;
@foreign public func LoadWave(fileName: *const char) : Wave;
@foreign public func LoadWaveEx(data: *void, sampleCount: i32, sampleRate: i32, sampleSize: i32, channels: i32) : Wave;
@foreign public func LoadSound(fileName: *const char) : Sound;
@foreign public func LoadSoundFromWave(wave: Wave) : Sound;
@foreign public func UpdateSound(sound: Sound, data: *const void, samplesCount: i32) : void;
@foreign public func UnloadWave(wave: Wave) : void;
@foreign public func UnloadSound(sound: Sound) : void;
@foreign public func ExportWave(wave: Wave, fileName: *const char) : void;
@foreign public func ExportWaveAsCode(wave: Wave, fileName: *const char) : void;
@foreign public func PlaySound(sound: Sound) : void;
@foreign public func PauseSound(sound: Sound) : void;
@foreign public func ResumeSound(sound: Sound) : void;
@foreign public func StopSound(sound: Sound) : void;
@foreign public func IsSoundPlaying(sound: Sound) : bool;
@foreign public func SetSoundVolume(sound: Sound, volume: f32) : void;
@foreign public func SetSoundPitch(sound: Sound, pitch: f32) : void;
@foreign public func WaveFormat(wave: *Wave, sampleRate: i32, sampleSize: i32, channels: i32) : void;
@foreign public func WaveCopy(wave: Wave) : Wave;
@foreign public func WaveCrop(wave: *Wave, initSample: i32, finalSample: i32) : void;
@foreign public func GetWaveData(wave: Wave) : *f32;
@foreign public func LoadMusicStream(fileName: *const char) : Music;
@foreign public func UnloadMusicStream(music: Music) : void;
@foreign public func PlayMusicStream(music: Music) : void;
@foreign public func UpdateMusicStream(music: Music) : void;
@foreign public func StopMusicStream(music: Music) : void;
@foreign public func PauseMusicStream(music: Music) : void;
@foreign public func ResumeMusicStream(music: Music) : void;
@foreign public func IsMusicPlaying(music: Music) : bool;
@foreign public func SetMusicVolume(music: Music, volume: f32) : void;
@foreign public func SetMusicPitch(music: Music, pitch: f32) : void;
@foreign public func SetMusicLoopCount(music: Music, count: i32) : void;
@foreign public func GetMusicTimeLength(music: Music) : f32;
@foreign public func GetMusicTimePlayed(music: Music) : f32;
@foreign public func InitAudioStream(sampleRate: u32, sampleSize: u32, channels: u32) : AudioStream;
@foreign public func UpdateAudioStream(stream: AudioStream, data: *const void, samplesCount: i32) : void;
@foreign public func CloseAudioStream(stream: AudioStream) : void;
@foreign public func IsAudioBufferProcessed(stream: AudioStream) : bool;
@foreign public func PlayAudioStream(stream: AudioStream) : void;
@foreign public func PauseAudioStream(stream: AudioStream) : void;
@foreign public func ResumeAudioStream(stream: AudioStream) : void;
@foreign public func IsAudioStreamPlaying(stream: AudioStream) : bool;
@foreign public func StopAudioStream(stream: AudioStream) : void;
@foreign public func SetAudioStreamVolume(stream: AudioStream, volume: f32) : void;
@foreign public func SetAudioStreamPitch(stream: AudioStream, pitch: f32) : void;


// MathLib

@foreign public func Clamp(value: f32, min: f32, max: f32) : f32;

// Calculate linear interpolation between two vectors
@foreign public func Lerp(start: f32, end: f32, amount: f32) : f32;

//----------------------------------------------------------------------------------
// Module Functions Definition - Vector2 math
//----------------------------------------------------------------------------------

// Vector with components value 0.0f
@foreign public func Vector2Zero() : Vector2;

// Vector with components value 1.0f
@foreign public func Vector2One() : Vector2;

// Add two vectors (v1 + v2)
@foreign public func Vector2Add(v1: Vector2, v2: Vector2) : Vector2;

// Subtract two vectors (v1 - v2)
@foreign public func Vector2Subtract(v1: Vector2, v2: Vector2) : Vector2;

// Calculate vector length
@foreign public func Vector2Length(v: Vector2) : f32;

public func Vector2Length2(v: Vector2) : f32 {
    var result = ((v.x*v.x) + (v.y*v.y));
    return result;
}

// Calculate two vectors dot product
@foreign public func Vector2DotProduct(v1: Vector2, v2: Vector2) : f32;

// Calculate distance between two vectors
@foreign public func Vector2Distance(v1: Vector2, v2: Vector2) : f32;

// Calculate angle from two vectors in X-axis
@foreign public func Vector2Angle(v1: Vector2, v2: Vector2) : f32;

// Scale vector (multiply by value)
@foreign public func Vector2Scale(v: Vector2, scale: f32) : Vector2;

// Multiply vector by vector
@foreign public func Vector2MultiplyV(v1: Vector2, v2: Vector2) : Vector2;

// Negate vector
@foreign public func Vector2Negate(v: Vector2) : Vector2;

// Divide vector by a float value
@foreign public func Vector2Divide(v: Vector2, div: f32) : Vector2;

// Divide vector by vector
@foreign public func Vector2DivideV(v1: Vector2, v2: Vector2) : Vector2;

// Normalize provided vector
@foreign public func Vector2Normalize(v: Vector2) : Vector2;

// Calculate linear interpolation between two vectors
@foreign public func Vector2Lerp(v1: Vector2, v2: Vector2, amount: f32) : Vector2;

public func Vec2MA(v1: Vector2, scalar: f32, v2: Vector2) : Vector2 {
    var x = v2.x * scalar
    var y = v2.y * scalar

    return Vector2{
        v1.x + x, v1.y + y
    }
}

// Rectangle
public func RectSet(r: *Rectangle, x: f32, y: f32, w: f32, h: f32) {
    r.x = x
    r.y = y
    r.width = w
    r.height = h
}

public func RectCenterV(r: *Rectangle, v: Vector2) {
    r.x = v.x - r.width/2f
    r.y = v.y - r.height/2f
}

public func RectCenter(r: *Rectangle, x: f32, y: f32) {
    r.x = x - r.width/2f
    r.y = y - r.height/2f
}

public func RectGetCenter(r: *Rectangle) : Vector2 {
    return Vector2 {
        r.x + r.width/2f,
        r.y + r.height/2f,
    }
}

public func RectSetPos(r: *Rectangle, x: f32, y: f32) {
    r.x = x
    r.y = y
}

public func RectSetPosV(r: *Rectangle, pos: Vector2) {
    r.x = pos.x
    r.y = pos.y
}

public func RectIntersectsRect(a: *Rectangle, b: *Rectangle) : bool {
    var tw = a.width;
    var th = a.height;
    var rw = b.width;
    var rh = b.height;
    if (rw <= 0 || rh <= 0 || tw <= 0 || th <= 0) {
        return false;
    }
    var tx = a.x;
    var ty = a.y;
    var rx = b.x;
    var ry = b.y;
    rw += rx;
    rh += ry;
    tw += tx;
    th += ty;

    //      overflow || intersect
    return ((rw < rx || rw > tx) &&
            (rh < ry || rh > ty) &&
            (tw < tx || tw > rx) &&
            (th < ty || th > ry));
}

public func RectContainsRect(a: *Rectangle, b: *Rectangle) : bool {
    var xmin = b.x;
    var xmax = xmin + b.width;

    var ymin = b.y;
    var ymax = ymin + b.height;

    return ((xmin > a.x && xmin < a.x + a.width) &&
            (xmax > a.x && xmax < a.x + a.width)) &&
           ((ymin > a.y && ymin < a.y + a.height) &&
            (ymax > a.y && ymax < a.y + a.height));
}


public func RectangleContainsV(a: *Rectangle, b: Vector2) : bool {
    var w = a.width as (i32);
    var h = a.height as (i32);
    if ((w | h) < 0) {
        // At least one of the dimensions is negative...
        return false;
    }
    // Note: if either dimension is zero, tests below must return false...
    var x = a.x;
    var y = a.y;
    if (b.x < x || b.y < y) {
        return false;
    }
    w += x as (i32);
    h += y as (i32);
    //    overflow || intersect
    return ((w < x || w > b.x) && (h < y || h > b.y));
}

public func main(len: i32, args: **char) : i32 {
    return 0;
}

@test
func testRaylib() {
    const screenWidth = 800;
    const screenHeight = 450;

    InitWindow(screenWidth, screenHeight, "raylib [core] example - basic window");

    SetTargetFPS(60);               // Set our game to run at 60 frames-per-second
    //--------------------------------------------------------------------------------------

    // Main game loop
    while (!WindowShouldClose())    // Detect window close button or ESC key
    {
        // Update
        //----------------------------------------------------------------------------------
        // TODO: Update your variables here
        //----------------------------------------------------------------------------------

        // Draw
        //----------------------------------------------------------------------------------
        BeginDrawing();

            ClearBackground(RAYWHITE);

            DrawText("Congrats! You created your first window!", 190, 200, 20, LIGHTGRAY);

        EndDrawing();
        //----------------------------------------------------------------------------------
    }

    // De-Initialization
    //--------------------------------------------------------------------------------------
    CloseWindow();        // Close window and OpenGL context
    //--------------------------------------------------------------------------------------

    c::printf("We did it\n")
}